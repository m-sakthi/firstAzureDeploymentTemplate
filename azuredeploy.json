{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"serverName": {
			"type": "string",
			"metadata": {
				"description": "Server Name for Azure database for PostgreSQL"
			}
		},
		"administratorLogin": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Database administrator login name"
			}
		},
		"administratorLoginPassword": {
			"type": "securestring",
			"minLength": 8,
			"metadata": {
				"description": "Database administrator password"
			}
		},
		"skuCapacity": {
			"type": "int",
			"defaultValue": 2,
			"metadata": {
				"description": "Azure database for PostgreSQL compute capacity in vCores (2,4,8,16,32)"
			}
		},
		"skuName": {
			"type": "string",
			"defaultValue": "GP_Gen5_2",
			"metadata": {
				"description": "Azure database for PostgreSQL sku name "
			}
		},
		"skuSizeMB": {
			"type": "int",
			"defaultValue": 51200,
			"metadata": {
				"description": "Azure database for PostgreSQL Sku Size "
			}
		},
		"skuTier": {
			"type": "string",
			"defaultValue": "GeneralPurpose",
			"metadata": {
				"description": "Azure database for PostgreSQL pricing tier"
			}
		},
		"skuFamily": {
			"type": "string",
			"defaultValue": "Gen5",
			"metadata": {
				"description": "Azure database for PostgreSQL sku family"
			}
		},
		"postgresqlVersion": {
			"type": "string",
			"allowedValues": [
				"9.5",
				"9.6",
				"10",
				"11"
			],
			"defaultValue": "11",
			"metadata": {
				"description": "PostgreSQL version"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"backupRetentionDays": {
			"type": "int",
			"defaultValue": 7,
			"metadata": {
				"description": "PostgreSQL Server backup retention days"
			}
		},
		"geoRedundantBackup": {
			"type": "string",
			"defaultValue": "Disabled",
			"metadata": {
				"description": "Geo-Redundant Backup setting"
			}
		},
		"virtualNetworkName": {
			"type": "string",
			"defaultValue": "azure_postgresql_vnet",
			"metadata": {
				"description": "Virtual Network Name"
			}
		},
		"subnetName": {
			"type": "string",
			"defaultValue": "azure_postgresql_subnet",
			"metadata": {
				"description": "Subnet Name"
			}
		},
		"virtualNetworkRuleName": {
			"type": "string",
			"defaultValue": "AllowSubnet",
			"metadata": {
				"description": "Virtual Network RuleName"
			}
		},
		"vnetAddressPrefix": {
			"type": "string",
			"defaultValue": "10.0.0.0/16",
			"metadata": {
				"description": "Virtual Network Address Prefix"
			}
		},
		"subnetPrefix": {
			"type": "string",
			"defaultValue": "10.0.0.0/16",
			"metadata": {
				"description": "Subnet Address Prefix"
			}
		},
		"storagePrefix": {
			"type": "string",
			"minLength": 3,
			"maxLength": 11
		},
		"storageSKU": {
			"type": "string",
			"defaultValue": "Standard_LRS",
			"allowedValues": [
				"Standard_LRS",
				"Standard_GRS",
				"Standard_RAGRS",
				"Standard_ZRS",
				"Premium_LRS",
				"Premium_ZRS",
				"Standard_GZRS",
				"Standard_RAGZRS"
			]
		},
		"appServicePlanName": {
			"type": "string",
			"defaultValue": "exampleplan"
		},
		"webAppName": {
			"type": "string",
			"metadata": {
				"description": "Base name of the resource such as web app name and app service plan "
			},
			"minLength": 2
		},
		"linuxFxVersion": {
			"type": "string",
			"defaultValue": "php|7.0",
			"metadata": {
				"description": "The Runtime stack of current web app"
			}
		},
		"resourceTags": {
			"type": "object",
			"defaultValue": {
				"Environment": "Dev",
				"Project": "Tutorial"
			}
		}
	},
	"variables": {
		"firewallrules": {
			"batch": {
				"rules": [{
						"Name": "rule1",
						"StartIpAddress": "0.0.0.0",
						"EndIpAddress": "255.255.255.255"
					},
					{
						"Name": "rule2",
						"StartIpAddress": "0.0.0.0",
						"EndIpAddress": "255.255.255.255"
					}
				]
			}
		},
		"uniqueStorageName": "[concat(parameters('storagePrefix'), uniqueString(resourceGroup().id))]",
		"webAppPortalName": "[concat(parameters('webAppName'), uniqueString(resourceGroup().id))]"
	},
	"resources": [{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2019-04-01",
			"name": "[variables('uniqueStorageName')]",
			"location": "[parameters('location')]",
			"tags": "[parameters('resourceTags')]",
			"sku": {
				"name": "[parameters('storageSKU')]"
			},
			"kind": "StorageV2",
			"properties": {
				"supportsHttpsTrafficOnly": true
			}
		},
		{
			"type": "Microsoft.Web/serverfarms",
			"apiVersion": "2016-09-01",
			"name": "[parameters('appServicePlanName')]",
			"location": "[parameters('location')]",
			"tags": "[parameters('resourceTags')]",
			"sku": {
				"name": "B1",
				"tier": "Basic",
				"size": "B1",
				"family": "B",
				"capacity": 1
			},
			"kind": "linux",
			"properties": {
				"perSiteScaling": false,
				"reserved": true,
				"targetWorkerCount": 0,
				"targetWorkerSizeId": 0
			}
		},
		{
			"type": "Microsoft.Web/sites",
			"apiVersion": "2018-11-01",
			"name": "[variables('webAppPortalName')]",
			"location": "[parameters('location')]",
			"tags": "[parameters('resourceTags')]",
			"dependsOn": [
				"[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
			],
			"kind": "app",
			"properties": {
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
				"siteConfig": {
					"linuxFxVersion": "[parameters('linuxFxVersion')]"
				}
			}
		},
		{
			"apiVersion": "2018-06-01",
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[parameters('virtualNetworkName')]",
			"location": "[parameters('location')]",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[parameters('vnetAddressPrefix')]"
					]
				}
			},
			"resources": [{
				"apiVersion": "2018-06-01",
				"type": "subnets",
				"location": "[parameters('location')]",
				"name": "[parameters('subnetName')]",
				"dependsOn": [
					"[parameters('virtualNetworkName')]"
				],
				"properties": {
					"addressPrefix": "[parameters('subnetPrefix')]"
				}
			}]
		},
		{
			"apiVersion": "2017-12-01",
			"type": "Microsoft.DBforPostgreSQL/servers",
			"location": "[parameters('location')]",
			"name": "[parameters('serverName')]",
			"sku": {
				"name": "[parameters('skuName')]",
				"tier": "[parameters('skuTier')]",
				"capacity": "[parameters('skuCapacity')]",
				"size": "[parameters('skuSizeMB')]",
				"family": "[parameters('skuFamily')]"
			},
			"properties": {
				"version": "[parameters('postgresqlVersion')]",
				"administratorLogin": "[parameters('administratorLogin')]",
				"administratorLoginPassword": "[parameters('administratorLoginPassword')]",
				"storageProfile": {
					"storageMB": "[parameters('skuSizeMB')]",
					"backupRetentionDays": "[parameters('backupRetentionDays')]",
					"geoRedundantBackup": "[parameters('geoRedundantBackup')]"
				}
			},
			"resources": [{
				"name": "[parameters('virtualNetworkRuleName')]",
				"type": "virtualNetworkRules",
				"apiVersion": "2017-12-01",
				"properties": {
					"virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
					"ignoreMissingVnetServiceEndpoint": true
				},
				"dependsOn": [
					"[concat('Microsoft.DBforPostgreSQL/servers/', parameters('serverName'))]"
				]
			}]
		},
		{
			"name": "[concat(parameters('serverName'),'/',variables('firewallrules').batch.rules[copyIndex()].Name)]",
			"type": "Microsoft.DBforPostgreSQL/servers/firewallRules",
			"apiVersion": "2017-12-01",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.DBforPostgreSQL/servers/', parameters('serverName'))]"
			],
			"copy": {
				"name": "firewallRulesCopy",
				"mode": "Serial",
				"batchSize": 1,
				"count": "[length(variables('firewallrules').batch.rules)]"
			},
			"properties": {
				"startIpAddress": "[variables('firewallrules').batch.rules[copyIndex()].StartIpAddress]",
				"endIpAddress": "[variables('firewallrules').batch.rules[copyIndex()].EndIpAddress]"
			}
		}
	],
	"outputs": {
		"storageEndPoint": {
			"type": "object",
			"value": "[reference(variables('uniqueStorageName')).primaryEndpoints]"
		}
	}
}
